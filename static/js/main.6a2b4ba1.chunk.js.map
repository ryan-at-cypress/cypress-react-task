{"version":3,"sources":["components/AddTodo.js","components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["AddTodo","props","useState","name","setName","Form","onSubmit","e","preventDefault","addTask","alert","className","htmlFor","Control","type","id","data-cy","autoComplete","autoFocus","value","onChange","target","Button","Todo","isEditing","setEditing","newName","setNewName","editingTemplate","editTask","defaultChecked","completed","toggleTaskCompleted","variant","onClick","size","deleteTask","viewTemplate","App","remainingTasks","tasks","filter","task","setTasks","editedTaskList","map","updatedTasks","a","slice","forEach","push","splice","indexOf","taskList","activeTaskCount","params","activeTasks","aLength","length","i","getActiveTaskCount","tasksNoun","headingText","Container","Row","Col","xs","Jumbotron","fluid","newTask","nanoid","unshift","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a2b4ba1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nfunction AddTodo(props) {\n  // sets initial name, defines function to modify name, array destructoring for name and setName\n  const [name, setName] = useState('');\n\n  // overrides default function of onSubmit, set in <form> attribute\n  // calls addTask in app.js, to set the name of the task\n  // TODO: add some verification for valid input\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (name !== ''){\n      props.addTask(name);\n      setName(\"\");\n    }\n    else {\n      alert('Please enter a task!');\n    }\n    \n\n  }\n\n  // get user input text, set in <input> attribute\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div className=\"header-text\">\n        <h2 className=\"label-wrapper\">\n          <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n            My Task Manager\n          </label>\n        </h2>\n      </div>\n      <Form.Control\n        type=\"text\"\n        id=\"new-todo-input\"\n        data-cy=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        autoFocus={true}\n        value={name}\n        onChange={handleChange}\n      />\n      <div>\n      <Button type=\"submit\" className=\"btn btn__primary btn-block\" id=\"add_task\">\n        Add Task\n      </Button>\n      </div>\n    </Form>\n  );\n}\n\nexport default AddTodo;","import React, { useState } from \"react\";\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nexport default function Todo(props) {\n\n  // isEditing state is used for conditional rendoring in the return statement\n  const [isEditing, setEditing] = useState(false);\n  // state for editing task name\n  const [newName, setNewName] = useState(props.name);\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  // set newName state when saving\n  // newName and the todo id is passed to editTask function in App.js\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (newName !== ''){\n      props.editTask(props.id, newName);\n      setEditing(false);\n    }\n    else {\n      alert('Please enter a task!');\n      // TODO: refocus on input\n    }\n \n  }\n\n  // Added this function for additional handlers\n  function handleLabelClick() {\n    setEditing(true);\n  }\n\n  const editingTemplate = (\n    <Form className=\"stack-small\" onSubmit={handleSubmit}>\n      <div className=\"c-cb\">\n          <input\n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n          />\n        <input\n          id={'text-input' + props.id}\n          className=\"todo-text\"\n          data-cy=\"todo-text\"\n          type=\"text\"\n          value={newName}\n          onChange={handleChange}\n          autoFocus={true}\n        />\n        </div>\n        \n        <div className=\"btn-group\">\n          <Button\n            variant=\"secondary\"\n            type=\"button\"\n            className=\"todo-btn todo-cancel\"\n            onClick={() => setEditing(false)}\n          >\n            Cancel\n            <span className=\"visually-hidden\">renaming {props.name}</span>\n          </Button>\n          <Button \n            variant=\"primary\"\n            size=\"sm\" \n            type=\"submit\"  \n            className=\"todo-btn btn__primary todo-edit\">\n            Save\n            <span className=\"visually-hidden\">new name for {props.name}</span>\n          </Button>\n          <Button\n              variant=\"danger\"\n              type=\"button\"\n              className=\"todo-btn btn__danger\"\n              onClick={() => props.deleteTask(props.id)}\n            >\n              Delete <span className=\"visually-hidden\">{props.name}</span>\n            </Button>\n        </div>\n\n    </Form>\n  );\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n          <input\n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n          />\n          <label className=\"todo-label\" data-cy=\"todo-label\" htmlFor={props.id} onClick={() => handleLabelClick()}>\n            {props.name}\n          </label>\n        </div>\n    </div>\n  );\n\n   // isEditing is set by onClick in the edit button\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n  }","import React, { useState } from \"react\";\n\nimport AddTodo from \"./components/AddTodo\";\nimport Todo from \"./components/Todo\";\nimport { nanoid } from \"nanoid\";\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction App(props) {\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    let a = tasks.slice();\n    a.unshift(newTask);\n    setTasks(a);\n    // setTasks({arr: a});\n    // setTasks([...tasks, newTask]);\n  }\n\n  function deleteTask(id) {\n    // returns array of tasks not equal to the deleted id\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }  \n\n  function toggleTaskCompleted(id) {\n    let updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n\n    let a = updatedTasks.slice();\n    updatedTasks.forEach((task) => {\n      if (task.completed === true) {\n          a.push(a.splice(a.indexOf(task), 1)[0]);\n        }\n      });\n\n  updatedTasks = a;\n\n    // // move task to end\n    // let a = tasks.slice();\n    // a.push(a.splice(a.indexOf(task), 1)[0]);\n    // console.log(a);\n    // setTasks(a);\n    // console.log(tasks);\n\n    setTasks(updatedTasks);\n  }\n  \n  function getActiveTaskCount(params) {\n    let activeTasks = 0;\n    // return activeTasks;\n\n    // loop through tasks\n    // count completed\n\n    let a = tasks.slice();\n    let aLength = a.length;\n    for (let i = 0; i < aLength; i++) {\n        if (a[i].completed === false) {\n          activeTasks++;\n        }\n    }\n    return activeTasks;\n  }\n\n  const [tasks, setTasks] = useState(props.tasks);\n  \n  // maps objects from DATA to taskList\n  const taskList = tasks.map(task => (\n    <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    )\n  );\n\n  // get number of active tasks for heading text\n  let activeTaskCount = getActiveTaskCount();\n  const tasksNoun = activeTaskCount!== 1 ? 'tasks' : 'task';\n  const headingText = `${activeTaskCount} ${tasksNoun} remaining`;\n  \n  return (\n    <Container className=\"p-5\">\n      <Row className=\"justify-content-md-center\">\n      <Col xs={6}>\n          <div className=\"todoapp stack-large\">\n            <Jumbotron>\n              <Container fluid className=\"p-4\">\n                <AddTodo addTask={addTask} />\n                <h2 id=\"list-heading\">{headingText}</h2>\n                <ul\n                  // role=\"list\"\n                  className=\"todo-list stack-large stack-exception\"\n                  aria-labelledby=\"list-heading\"\n                >\n                  {taskList}\n                </ul>\n              </Container>\n            </Jumbotron>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// An arrary of objects to represent our initial todos\nconst DATA = [\n  { id: \"todo-0\", name: \"Learn cypress\", completed: false },\n  { id: \"todo-1\", name: \"Drink coffee\", completed: false },\n  { id: \"todo-2\", name: \"Push code\", completed: false }\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks = {DATA} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}